# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Status(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, is_sitting: bool=None, timestamp: datetime=None, room: str=None):  # noqa: E501
        """Status - a model defined in Swagger

        :param is_sitting: The is_sitting of this Status.  # noqa: E501
        :type is_sitting: bool
        :param timestamp: The timestamp of this Status.  # noqa: E501
        :type timestamp: datetime
        :param room: The room of this Status.  # noqa: E501
        :type room: str
        """
        self.swagger_types = {
            'is_sitting': bool,
            'timestamp': datetime,
            'room': str
        }

        self.attribute_map = {
            'is_sitting': 'isSitting',
            'timestamp': 'timestamp',
            'room': 'room'
        }
        self._is_sitting = is_sitting
        self._timestamp = timestamp
        self._room = room

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_sitting(self) -> bool:
        """Gets the is_sitting of this Status.

        Describe si el usuario est치 o no sentado.  # noqa: E501

        :return: The is_sitting of this Status.
        :rtype: bool
        """
        return self._is_sitting

    @is_sitting.setter
    def is_sitting(self, is_sitting: bool):
        """Sets the is_sitting of this Status.

        Describe si el usuario est치 o no sentado.  # noqa: E501

        :param is_sitting: The is_sitting of this Status.
        :type is_sitting: bool
        """
        if is_sitting is None:
            raise ValueError("Invalid value for `is_sitting`, must not be `None`")  # noqa: E501

        self._is_sitting = is_sitting

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this Status.

        Timestamp del estado.  # noqa: E501

        :return: The timestamp of this Status.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this Status.

        Timestamp del estado.  # noqa: E501

        :param timestamp: The timestamp of this Status.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def room(self) -> str:
        """Gets the room of this Status.

        Habitaci칩n en la que se encuentra el usuario.  # noqa: E501

        :return: The room of this Status.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room: str):
        """Sets the room of this Status.

        Habitaci칩n en la que se encuentra el usuario.  # noqa: E501

        :param room: The room of this Status.
        :type room: str
        """
        if room is None:
            raise ValueError("Invalid value for `room`, must not be `None`")  # noqa: E501

        self._room = room
